[advice]
    statusuoption = false
    
# Customization alias
[alias]
    # Add and remove all changes, note how this alias is calling another alias
    addremove = !git r && git add . --all
    
    # Show all of my configured aliases
    aliases = !git config --list | grep 'alias\\.' | sed 's/alias\\.\\([^=]*\\)=\\(.*\\)/\\1\\ \t => \\2/' | sort
    all = add . --all
    
    # For when you made that commit a bit too early, amend
    amend = !git log -n 1 --pretty=tformat:%s%n%n%b | git commit -F - --amend
    
    # Show all branches
    br = branch -av
    
    # Show the current branch name (usefull for shell prompts)
    brname = !git branch | grep "^*" | awk '{ print $2 }'
    
    # Delete a branch
    brdel = branch -D
    brmerged = branch --merged
    brnomerged = branch --no-merged
    ci = commit
    changes = "!f() { git log --pretty=format:'* %s' $1..$2; }; f"
    
    # Which files are receiving the most "love"
    churn = !git log --all -M -C --name-only --format='format:' "$@" | sort | grep -v '^$' | uniq -c | sort | awk 'BEGIN {print "count,file"} {print $1 "," $2}'
    co = checkout
    
    # View the log and diff for a commit (previous if no SHA1 provided)
    details = log -n1 -p --format=fuller
    
    # Save a repo as a tarball
    export = archive -o latest.tar.gz -9 --prefix=latest/
    
    # Unstage changes from the index
    unstage = reset HEAD --
    
    # View a pretty git log with branch tree
    lg = !git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
    
    # View commit history with files changed
    lgstat = !git log --pretty=format:'[%h] %ae, %ar: %s' --stat
    in = pull --dry-run
    
    # Return a list of commit SHA1s
    l = "!f() { git log $* | grep '^commit ' | cut -f 2 -d ' '; }; f"
    out = log --branches --not --remotes
    
    # Remove deleted files
    r = !git ls-files -z --deleted | xargs -0 git rm
    
    # Return the repository's root directory (usefull for shell prompts)
    root = rev-parse --show-toplevel
    st = status
    
    # Update all submodules
    subup = submodule update --init
    
    # List all tags
    tags = tag -l
    
    # Start a new local repository and perform initial commit
    this = !git init && git add . && git commit -m \"Initial commit.\"
    
    # Thin out older metadata within the repository, reduceses filesystem footprint
    trim = !git reflog expire --expire=now --all && git gc --prune=now
    
    # Pretty up the reflog
    ref = reflog --pretty=format:'%C(yellow)%h%Creset -%Cgreen%gd %C(white)%gs%Creset' --date=relative
    
    # Assume you create a remote name 'upstream' to base repo
    #pu = !"git fetch origin -v; git fetch upstream -v; git merge upstream/master"
    pu = !"git fetch origin -v; git fetch upstream -v; git checkout master; git rebase --preserve-merges upstream/master"
    
    # Uprising 
    ulg = !git log --oneline --decorate --graph --all -n13
    
    # Disable Fast-Forward to reduce merge bubbles.
    mff = !git merge --no-ff
    
    # Stash related
    sl = stash list
    sls = stash list --stat
    ss = stash save
    sa = "!sh -c 'git stash apply stash@{$1}' -"
    sd = "!sh -c 'git stash drop stash@{$1}' -"
    sh = "!sh -c 'git stash show -p stash@{$1}' -"
    
    # WIP related, note: not sure if like this approach vs git-stash
    #wip = !"git add -A; git ls-files --deleted -z | xargs -0 git rm; git commit -m \"wip\""
    #unwip = !"git log -n 1 | grep -q -c wip && git reset HEAD~1"
    
    up = !"git fetch origin --append --prune --tags --verbose"
    upall = !"git fetch origin -aptv; git fetch upstream -apv"
    
    vimdiff = difftool
    branchdiff = '!git difftool $(git merge-base master HEAD)'
    
    # diff
    dfstat = !git diff --stat --ignore-blank-lines
    dfsum = !git diff --summary --ignore-blank-lines

[branch]
    autosetuprebase = always

[core]
    editor = nano
    whitespace = off
    excludesfile = ~/.gitignore
    compression = 9
    filemode = false
    
[color]
    ui = true

[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green

[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold

[color "status"]
    added = yellow
    changed = green
    untracked = red

[diff]
    mnemonicprefix = true
    tool = vimdiff

[merge]
    log = true
    ff = false

[push]
    default = simple

[url "https://bitbucket.org/"]
    insteadOf = bb:

[url "https://github.com/"]
    insteadOf = gh:

[url "https://gist.github.com/"]
    insteadOf = gist:

# 
[user]
    name = Noi Narisak
    email = noi.narisak@gmail.com    
